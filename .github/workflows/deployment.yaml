name: Deploy Automation Frontend

on:
  workflow_dispatch: 
  push:
    branches:
      - "release-staging"
      - "main"

jobs: 
  deploy-staging:
    if: github.ref == 'refs/heads/release-staging'
    runs-on: ubuntu-latest
    environment: 
          name: staging
          url: https://github.com
      

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SSH Setup and Cloning Repository
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./key.pem
          chmod 600 ./key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} -T <<EOF
          REPO_DIR=~/ONDC-automation-framework-staging/automation-frontend
          echo "Removing existing repository directory if exists"
          rm -rf \$REPO_DIR
          echo "Cloning repository from release-staging branch"
          git clone --single-branch --branch release-staging https://github.com/ONDC-Official/automation-frontend.git \$REPO_DIR
          EOF

      - name: Install Docker Compose (if not installed)
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          # Check if Docker Compose is installed
          if ! command -v docker-compose &> /dev/null
          then
            echo "Docker Compose not found. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
          EOF

      - name: Write secrets to .env on EC2
        run: |
          echo "Writing secrets to .env file"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework-staging/automation-frontend
          echo "Writing environment variables to .env file"
          
          echo "VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}" >> \$REPO_DIR/frontend/.env
          echo "VITE_BPP_URL=${{ secrets.VITE_BPP_URL }}" >> \$REPO_DIR/frontend/.env
          echo "VITE_BAP_URL=${{ secrets.VITE_BAP_URL }}" >> \$REPO_DIR/frontend/.env
          echo "VITE_BASE_URL=${{ vars.VITE_BASE_URL }}" >> \$REPO_DIR/frontend/.env
          
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> \$REPO_DIR/backend/.env
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> \$REPO_DIR/backend/.env
          echo "PORT=${{ secrets.PORT }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}" >> \$REPO_DIR/backend/.env
          echo "MOCK_SERVICE=${{ secrets.MOCK_SERVICE }}" >> \$REPO_DIR/backend/.env
          echo "REPORTING_SERVICE=${{ vars.REPORTING_SERVICE_STAGING }}" >> \$REPO_DIR/backend/.env
          echo "API_SERVICE=${{ secrets.API_SERVICE }}" >> \$REPO_DIR/backend/.env
          echo "DB_SERVICE=${{ vars.DB_SERVICE_STAGING }}" >> \$REPO_DIR/backend/.env
          echo "CONFIG_SERVICE=${{ secrets.CONFIG_SERVICE }}" >> \$REPO_DIR/backend/.env
          echo "SERVICE_NAME=${{ vars.SERVICE_NAME }}" >> \$REPO_DIR/backend/.env
          echo "TRACE_URL=${{ vars.TRACE_URL }}" >> \$REPO_DIR/backend/.env
          echo "API_SERVICE_KEY=${{ secrets.API_SERVICE_KEY }}" >> \$REPO_DIR/backend/.env
          echo "GITHUB_CLIENT_ID=${{ secrets.CLIENT_ID_GITHUB_STAGING }}" >> \$REPO_DIR/backend/.env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.CLIENT_SECRET_GITHUB_STAGING }}" >> \$REPO_DIR/backend/.env
          echo "IN_HOUSE_REGISTRY=${{ vars.IN_HOUSE_REGISTRY_STAGING }}" >> \$REPO_DIR/backend/.env
          echo "FRONTEND_URL=${{ vars.FRONTEND_URL_STAGING }}" >> \$REPO_DIR/backend/.env
          echo "BACKEND_URL=${{ vars.BACKEND_URL_STAGING }}" >> \$REPO_DIR/backend/.env
          echo "LOKI_HOST=${{ vars.LOKI_HOST }}" >> \$REPO_DIR/backend/.env
          echo "AWS_ACCESS_KEY_ID =${{ secrets.AWS_ACCESS_KEY_ID }}" >> \$REPO_DIR/backend/.env
          echo "AWS_SECRET_ACCESS_KEY =${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> \$REPO_DIR/backend/.env
          echo "AWS_REGION =${{ secrets.AWS_REGION }}" >> \$REPO_DIR/backend/.env
          echo "S3_BUCKET_NAME =${{ secrets.S3_BUCKET_NAME }}" >> \$REPO_DIR/backend/.env
          echo "S3_FOLDER =${{ secrets.S3_FOLDER }}" >> \$REPO_DIR/backend/.env
          EOF

      - name: Verify docker-compose.yml files
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework-staging/automation-frontend
          # Check if docker-compose.yml files exist
          mv \$REPO_DIR/docker-compose-staging.yml \$REPO_DIR/docker-compose.yml
          if [ ! -f \$REPO_DIR/docker-compose.yml ]; then
            echo "docker-compose.yml file not found in \$REPO_DIR!"
            exit 1
          fi
          echo ".env and docker-compose.yml files found."
          EOF

      - name: Automation UI Deployment
        run: |
          echo "Deploying with Docker Compose"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework-staging/automation-frontend
          cd \$REPO_DIR

          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml file not found!"
            exit 1
          fi

          # Start the containers using Docker Compose
          echo "Running docker-compose up -d --build"
          sudo docker compose -p automation-staging up -d --build
          EOF

  deploy-main:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SSH Setup and Cloning Repository
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./key.pem
          chmod 600 ./key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} -T <<EOF
          REPO_DIR=~/ONDC-automation-framework/automation-frontend
          echo "Removing existing repository directory if exists"
          rm -rf \$REPO_DIR
          echo "Cloning repository from main branch"
          git clone --single-branch --branch main https://github.com/ONDC-Official/automation-frontend.git \$REPO_DIR
          EOF
      - name: Install Docker Compose (if not installed)
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          # Check if Docker Compose is installed
          if ! command -v docker-compose &> /dev/null
          then
            echo "Docker Compose not found. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
          EOF
      - name: Write secrets to .env on EC2
        run: |
          echo "Writing secrets to .env file"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/automation-frontend
          echo "Writing environment variables to .env file"
          
          echo "VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}" >> \$REPO_DIR/frontend/.env
          echo "VITE_BPP_URL=${{ secrets.VITE_BPP_URL }}" >> \$REPO_DIR/frontend/.env
          echo "VITE_BAP_URL=${{ secrets.VITE_BAP_URL }}" >> \$REPO_DIR/frontend/.env
          echo "VITE_BASE_URL=${{ vars.VITE_BASE_URL }}" >> \$REPO_DIR/frontend/.env
          
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> \$REPO_DIR/backend/.env
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> \$REPO_DIR/backend/.env
          echo "PORT=${{ secrets.PORT }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}" >> \$REPO_DIR/backend/.env
          echo "MOCK_SERVICE=${{ vars.MOCK_SERVICE }}" >> \$REPO_DIR/backend/.env
          echo "REPORTING_SERVICE=${{ vars.REPORTING_SERVICE_DEV }}" >> \$REPO_DIR/backend/.env
          echo "API_SERVICE=${{ secrets.API_SERVICE }}" >> \$REPO_DIR/backend/.env
          echo "DB_SERVICE=${{ vars.DB_SERVICE }}" >> \$REPO_DIR/backend/.env
          echo "CONFIG_SERVICE=${{ secrets.CONFIG_SERVICE }}" >> \$REPO_DIR/backend/.env
          echo "SERVICE_NAME=${{ vars.SERVICE_NAME }}" >> \$REPO_DIR/backend/.env
          echo "TRACE_URL=${{ vars.TRACE_URL }}" >> \$REPO_DIR/backend/.env
          echo "API_SERVICE_KEY=${{ secrets.API_SERVICE_KEY }}" >> \$REPO_DIR/backend/.env
          echo "GITHUB_CLIENT_ID=${{ secrets.CLIENT_ID_GITHUB }}" >> \$REPO_DIR/backend/.env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.CLIENT_SECRET_GITHUB }}" >> \$REPO_DIR/backend/.env
          echo "IN_HOUSE_REGISTRY=${{ vars.IN_HOUSE_REGISTRY }}" >> \$REPO_DIR/backend/.env
          echo "FRONTEND_URL=${{ vars.FRONTEND_URL }}" >> \$REPO_DIR/backend/.env
          echo "BACKEND_URL=${{ vars.BACKEND_URL }}" >> \$REPO_DIR/backend/.env
          echo "LOKI_HOST=${{ vars.LOKI_HOST }}" >> \$REPO_DIR/backend/.env
          echo "AWS_ACCESS_KEY_ID =${{ secrets.AWS_ACCESS_KEY_ID }}" >> \$REPO_DIR/backend/.env
          echo "AWS_SECRET_ACCESS_KEY =${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> \$REPO_DIR/backend/.env
          echo "AWS_REGION =${{ secrets.AWS_REGION }}" >> \$REPO_DIR/backend/.env
          echo "S3_BUCKET_NAME =${{ secrets.S3_BUCKET_NAME }}" >> \$REPO_DIR/backend/.env
          echo "S3_FOLDER =${{ secrets.S3_FOLDER }}" >> \$REPO_DIR/backend/.env
          
          
          
          EOF
      - name: Verify docker-compose.yml files
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/automation-frontend
          # Check if docker-compose.yml files exist
          mv \$REPO_DIR/docker-compose-main.yml \$REPO_DIR/docker-compose.yml
          if [ ! -f \$REPO_DIR/docker-compose.yml ]; then
            echo "docker-compose.yml file not found in \$REPO_DIR!"
            exit 1
          fi
          echo ".env and docker-compose.yml files found."
          EOF
      - name: Automation UI Deployment
        run: |
          echo "Deploying with Docker Compose"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/automation-frontend
          cd \$REPO_DIR
          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml file not found!"
            exit 1
          fi
          # Start the containers using Docker Compose
          echo "Running docker-compose up -d --build"
          sudo docker compose up -d --build
          EOF
